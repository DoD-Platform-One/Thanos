{{- $upgradeVersion := "15.7.27-bb.1" }}
{{- if .Release.IsUpgrade }}
  {{- $statefulSet := lookup "apps/v1" "StatefulSet" .Release.Namespace "thanos-storegateway" }}
  {{- if $statefulSet }}
    {{- $currentVersion := dig "metadata" "labels" "helm.sh/chart" "<missing>" $statefulSet | trimPrefix "thanos-" }}
    {{- if semverCompare (print "<" $upgradeVersion) $currentVersion }}
{{- if .Values.networkPolicies.enabled }}
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-egress-upgrade-job
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  egress:
  - to:
    - ipBlock:
        cidr: {{ .Values.networkPolicies.controlPlaneCidr }}
        {{- if eq .Values.networkPolicies.controlPlaneCidr "0.0.0.0/0" }}
        # ONLY Block requests to AWS metadata IP
        except:
        - 169.254.169.254/32
        {{- end }}
  podSelector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.upgradeJob.name }}
  policyTypes:
  - Egress
---
{{- end }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.upgradeJob.serviceAccount }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Values.upgradeJob.role }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
rules:
- apiGroups: ["apps"]
  resources: ["statefulsets"]
  verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Values.upgradeJob.roleBinding }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Values.upgradeJob.role }}
subjects:
- kind: ServiceAccount
  name: {{ .Values.upgradeJob.serviceAccount }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.upgradeJob.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
spec:
  template:
    metadata:
    spec:
      automountServiceAccountToken: true
      imagePullSecrets:
        - name: {{ .Values.upgradeJob.image.pullSecrets }}
      serviceAccountName: {{ .Values.upgradeJob.serviceAccount }}
      containers:
      - name: {{ .Values.upgradeJob.name }}
        image: {{ .Values.upgradeJob.image.repository }}:{{ .Values.upgradeJob.image.tag }}
        imagePullPolicy: {{ .Values.upgradeJob.image.imagePullPolicy }}
        command:
        - "/bin/bash"
        - "-c"
        - |
          # Delete the existing statefulset and check if successful
          if kubectl delete statefulset thanos-storegateway -n {{ .Release.Namespace }}; then
            echo "StatefulSet deleted successfully."
          else
            echo "[ERROR] Failed to delete StatefulSet." >&2
            exit 1
          fi
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 100m
            memory: 256Mi
        securityContext:
          capabilities:
            drop: ["ALL"]
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
      restartPolicy: Never

    {{- end }}
  {{- end }}
{{- end }}